def CONTAINER_NAME="basket"
def CONTAINER_TAG="latest"
def DOCKER_HUB_USER="ankuratudemy"
def HTTP_PORT="9090"
def customImage =''
def customTestImage = ''
def customImageContainer =''
def customTestImageContainer =''
node {

    stage('Initialize'){
        // def dockerHome = tool 'mydocker'
        // def mavenHome  = tool 'myMaven'
        // env.PATH = "${dockerHome}/bin:${mavenHome}/bin:${env.PATH}"
    }
stage('Clone repository') {


        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm

    }
 stage("Glue-Static"){

        sh '''echo "Starting Glue"
              echo "Script executed from: ${PWD}/app"
              eval $(docker-machine env default)
              GUID="$RANDOM"
              docker run --rm=true --name=glue_ci_code -v ${PWD}/app:/tmp/$GUID/ owasp/glue -z -t brakeman,sfl -d /tmp/$GUID/'''

    }
 stage("Build Basket Image"){

        customImage = docker.build("ankuratudemy/basket:${env.BUILD_ID}","./app")

    }

  stage("Build Basket Image"){

         customTestImage = docker.build("ankuratudemy/basket-test:${env.BUILD_ID}")

    }





stage("Run Tests with basket-test image and mongoDb conatiner"){
docker.image('mongo:latest').withRun('-p 27017:27017'){ c ->

        docker.image('mongo:latest').inside("--link ${c.id}:mongodb") {
            /* Wait until mongodb service is up */
            sh 'while ! true; do sleep 1; done'
                  
        }
        sh 'docker stop basket basket-test'
        sh 'docker system prune -f'
        
        customImageContainer = customImage.run("--name=basket -e MONGO_HOST=mongodb -e MONGO_PORT=27017 -e DATABASE=rackspace-basket -e PORT=${HTTP_PORT} -p 9090:8080")
        customTestImageContainer = customTestImage.inside("--name=basket-test -e MONGO_HOST=mongodb -e MONGO_PORT=27017 -e DATABASE=rackspace-basket -e PORT=${HTTP_PORT}"){
            sh 'cd app  && npm test'
        }
}

    }


stage("Stop Conatiners"){

    "${customImageContainer}".stop()
    "${customTestImageContainer}".stop()
}

stage('Push image to Docker hub') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
            customImage.push("${env.BUILD_ID}")
            customImage.push("latest")
        }
    }

}