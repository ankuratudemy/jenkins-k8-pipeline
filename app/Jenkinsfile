def CONTAINER_NAME="basket"
def CONTAINER_TAG="latest"
def DOCKER_HUB_USER="ankuratudemy"
def HTTP_PORT="8080"

node {

    stage('Initialize'){
        // def dockerHome = tool 'mydocker'
        // def mavenHome  = tool 'myMaven'
        // env.PATH = "${dockerHome}/bin:${mavenHome}/bin:${env.PATH}"
    }
stage('Clone repository') {


        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm

    }
 stage("Glue-Static"){

        sh '''echo "Starting Glue"
              echo "Script executed from: ${PWD}/app"
              eval $(docker-machine env default)
              GUID="$RANDOM"
              docker run --rm=true --name=glue_ci_code -v ${PWD}/app:/tmp/$GUID/ owasp/glue -z -t brakeman,sfl -d /tmp/$GUID/'''

    }
 stage("Build Basket Image"){

        def customImage = docker.build("ankuratudemy/basket:${env.BUILD_ID}","./app")

    }



stage("Build Basket Test Image"){


        def customTestImage = docker.build("basket-test:${env.BUILD_ID}")

    }


stage("Run Tests with basket-test image and mongoDb conatiner"){
docker.image('mongo:latest').withRun('-p 27017:27017')
 { c ->
        docker.image('mongo:latest').inside("--link ${c.id}:mongodb") {
            /* Wait until mongodb service is up */
            sh 'while ! echo 'db.runCommand("ping").ok' | mongo mongodb:27017/test --quiet; do sleep 1; done'
        }
        docker.image("basket-test:${env.BUILD_ID}").inside("--link ${c.id}:mongodb") { 
        }
    }

}

stage('Push image to Docker hub') {
        /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
        docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
            customImage.push("${env.BUILD_ID}")
            customImage.push("latest")
        }
    }

}